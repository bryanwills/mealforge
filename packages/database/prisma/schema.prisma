// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipes        Recipe[]
  savedRecipes  SavedRecipe[]
  videoJobs     VideoProcessingJob[]
  videoRecipes  VideoRecipe[]
  videoFiles    VideoFile[]
  videoImportLogs VideoImportLog[]

  @@map("users")
}

model Recipe {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  prepTime    Int      @default(0)
  cookTime    Int      @default(0)
  servings    Int      @default(0)
  difficulty  String   @default("medium")
  cuisine     String?
  tags        String[]
  instructions String[]
  ingredients Json[] // Array of ingredient objects
  sourceUrl   String?
  isPublic    Boolean  @default(false)
  isShared    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  savedRecipes SavedRecipe[]

  @@map("recipes")
}

model SavedRecipe {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  recipe Recipe @relation(fields: [recipeId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([recipeId, userId])
  @@map("saved_recipes")
}

// Video Processing Models
model VideoProcessingJob {
  id        String   @id @default(cuid())
  videoId   String   @unique
  userId    String
  platform  String
  status    String   @default("queued") // queued, processing, completed, failed
  priority  String   @default("normal") // low, normal, high
  progress  Int      @default(0)
  currentStep String @default("Queued for processing")
  estimatedTime Int  @default(0)
  error     String?
  retryCount Int     @default(0)
  maxRetries Int     @default(3)
  createdAt DateTime @default(now())
  startedAt DateTime?
  completedAt DateTime?

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  videoAnalysis VideoAnalysis?
  videoRecipe   VideoRecipe?

  @@map("video_processing_jobs")
}

model VideoAnalysis {
  id        String   @id @default(cuid())
  jobId     String   @unique
  videoId   String
  analysisType String @default("full") // full, quick, custom
  status    String   @default("queued") // queued, processing, completed, failed
  progress  Int      @default(0)
  currentStep String?
  estimatedCompletion DateTime?
  analysisConfig Json? // Analysis options and configuration
  frames    Json? // Extracted video frames with objects and text
  audioSegments Json? // Audio transcription segments
  textOverlays Json? // OCR text overlays
  motionAnalysis Json? // Motion and action analysis
  confidence Float   @default(0)
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  videoJob VideoProcessingJob @relation(fields: [jobId], references: [id])

  @@map("video_analyses")
}

model VideoRecipe {
  id        String   @id @default(cuid())
  jobId     String   @unique
  videoId   String
  userId    String
  title     String
  description String?
  imageUrl  String?
  prepTime  Int      @default(0)
  cookTime  Int      @default(0)
  servings  Int      @default(0)
  difficulty String  @default("easy")
  cuisine   String?
  tags      String[]
  instructions String[]
  ingredients Json[] // Array of ingredient objects
  sourceUrl String?
  isPublic  Boolean  @default(false)
  isShared  Boolean  @default(false)
  confidence Float   @default(0)
  extractionMethod String @default("ai-video-analysis")
  recommendations Json? // AI-generated recommendations
  metadata  Json? // Extraction metadata and options
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  videoJob VideoProcessingJob @relation(fields: [jobId], references: [id])
  user     User               @relation(fields: [userId], references: [id])

  @@map("video_recipes")
}

model VideoFile {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  path      String
  platform  String? // tiktok, instagram, youtube, facebook, custom
  metadata  Json? // Video metadata (duration, resolution, etc.)
  status    String  @default("uploaded") // uploaded, processing, completed, failed
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("video_files")
}

model VideoImportLog {
  id        String   @id @default(cuid())
  videoId   String
  userId    String
  action    String // upload, analyze, extract, save
  status    String // success, failed
  details   Json? // Action details and results
  error     String?
  processingTime Int? // Time taken in milliseconds
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("video_import_logs")
}
