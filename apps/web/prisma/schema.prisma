generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  preferences   Json          @default("{}")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  groceryLists  GroceryList[]
  mealPlans     MealPlan[]
  recipes       Recipe[]
  sessions      Session[]

  @@map("User")
}

model Recipe {
  id             String             @id @default(cuid())
  userId         String
  title          String
  description    String?
  imageUrl       String?
  prepTime       Int?
  cookTime       Int?
  servings       Int                @default(1)
  difficulty     String?
  cuisine        String?
  tags           String[]
  instructions   String[]
  sourceUrl      String?
  isPublic       Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  isShared       Boolean?           @default(false)
  calories       Int?
  nutrition      Json?
  importSource   String?
  importAccuracy Float?
  externalId     String?
  user           User               @relation(fields: [userId], references: [id])
  ingredients    RecipeIngredient[]

  @@map("Recipe")
}

model Ingredient {
  id                String             @id @default(cuid())
  name              String             @unique
  category          String?
  commonUnits       String[]
  caloriesPerGram   Float?
  proteinPerGram    Float?
  carbsPerGram      Float?
  fatPerGram        Float?
  fiberPerGram      Float?
  sugarPerGram      Float?
  sodiumPerGram     Float?
  conversionFactors Json?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  recipeIngredients RecipeIngredient[]

  @@map("Ingredient")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipeId     String
  ingredientId String
  unit         String
  quantity     Float
  notes        String?
  isOptional   Boolean    @default(false)
  order        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, ingredientId, unit])
  @@map("RecipeIngredient")
}

model MealPlan {
  id           String        @id @default(cuid())
  userId       String
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  groceryLists GroceryList[]
  user         User          @relation(fields: [userId], references: [id])
  mealPlanDays MealPlanDay[]

  @@map("MealPlan")
}

model MealPlanDay {
  id         String         @id @default(cuid())
  mealPlanId String
  date       DateTime
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  mealPlan   MealPlan       @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  meals      MealPlanMeal[]

  @@unique([mealPlanId, date])
  @@map("MealPlanDay")
}

model MealPlanMeal {
  id            String      @id @default(cuid())
  mealPlanDayId String
  recipeId      String
  mealType      String
  servings      Int         @default(1)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  mealPlanDay   MealPlanDay @relation(fields: [mealPlanDayId], references: [id], onDelete: Cascade)

  @@unique([mealPlanDayId, mealType])
  @@map("MealPlanMeal")
}

model GroceryList {
  id          String            @id @default(cuid())
  userId      String
  mealPlanId  String?
  name        String
  description String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  mealPlan    MealPlan?         @relation(fields: [mealPlanId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  items       GroceryListItem[]

  @@map("GroceryList")
}

model GroceryListItem {
  id             String      @id @default(cuid())
  groceryListId  String
  ingredientName String
  quantity       Float
  unit           String
  notes          String?
  isCompleted    Boolean     @default(false)
  category       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  groceryList    GroceryList @relation(fields: [groceryListId], references: [id], onDelete: Cascade)

  @@map("GroceryListItem")
}
