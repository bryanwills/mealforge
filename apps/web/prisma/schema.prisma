// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique // Clerk authentication ID
  email       String   @unique
  firstName   String?
  lastName    String?
  preferences Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  recipes      Recipe[]
  mealPlans    MealPlan[]
  groceryLists GroceryList[]

  @@map("User")
}

model Recipe {
  id             String   @id @default(cuid())
  userId         String
  title          String
  description    String?
  imageUrl       String?
  prepTime       Int?
  cookTime       Int?
  servings       Int      @default(1)
  difficulty     String?
  cuisine        String?
  tags           String[]
  instructions   String[]
  sourceUrl      String?
  isPublic       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isShared       Boolean? @default(false)
  calories       Int?
  nutrition      Json?
  importSource   String?
  importAccuracy Float?
  externalId     String?

  // Relations
  user        User               @relation(fields: [userId], references: [id])
  ingredients RecipeIngredient[]

  @@map("Recipe")
}

model Ingredient {
  id                String  @id @default(cuid())
  name              String  @unique
  category          String?
  commonUnits       String[]
  caloriesPerGram   Float?
  proteinPerGram    Float?
  carbsPerGram      Float?
  fatPerGram        Float?
  fiberPerGram      Float?
  sugarPerGram      Float?
  sodiumPerGram     Float?
  conversionFactors Json?
  isActive          Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  recipeIngredients RecipeIngredient[]

  @@map("Ingredient")
}

model RecipeIngredient {
  id           String  @id @default(cuid())
  recipeId     String
  ingredientId String
  unit         String
  quantity     Float
  notes        String?
  isOptional   Boolean @default(false)
  order        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([recipeId, ingredientId, unit])
  @@map("RecipeIngredient")
}

model MealPlan {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User              @relation(fields: [userId], references: [id])
  mealPlanDays MealPlanDay[]
  groceryLists GroceryList[]

  @@map("MealPlan")
}

model MealPlanDay {
  id         String   @id @default(cuid())
  mealPlanId String
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  mealPlan MealPlan       @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  meals    MealPlanMeal[]

  @@unique([mealPlanId, date])
  @@map("MealPlanDay")
}

model MealPlanMeal {
  id            String @id @default(cuid())
  mealPlanDayId String
  recipeId      String
  mealType      String // breakfast, lunch, dinner, snack
  servings      Int    @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  mealPlanDay MealPlanDay @relation(fields: [mealPlanDayId], references: [id], onDelete: Cascade)
  // Note: We don't create a direct relation to Recipe since recipes can be deleted
  // Instead we'll store the recipe data or handle it through application logic

  @@unique([mealPlanDayId, mealType])
  @@map("MealPlanMeal")
}

model GroceryList {
  id          String   @id @default(cuid())
  userId      String
  mealPlanId  String?
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User               @relation(fields: [userId], references: [id])
  mealPlan     MealPlan?          @relation(fields: [mealPlanId], references: [id])
  items        GroceryListItem[]

  @@map("GroceryList")
}

model GroceryListItem {
  id             String  @id @default(cuid())
  groceryListId  String
  ingredientName String
  quantity       Float
  unit           String
  notes          String?
  isCompleted    Boolean @default(false)
  category       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  groceryList GroceryList @relation(fields: [groceryListId], references: [id], onDelete: Cascade)

  @@map("GroceryListItem")
}