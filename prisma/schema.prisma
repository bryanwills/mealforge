// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  clerkId     String   @unique // Clerk user ID
  email       String   @unique
  firstName   String?
  lastName    String?
  preferences Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  recipes     Recipe[]
  mealPlans   MealPlan[]
  groceryLists GroceryList[]
}

model Recipe {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  title        String
  description  String?
  imageUrl     String?
  prepTime     Int?     // in minutes
  cookTime     Int?     // in minutes
  servings     Int      @default(1)
  difficulty   String?  // easy, medium, hard
  cuisine      String?
  tags         String[] // array of tags
  instructions String[]
  sourceUrl    String?  // URL where recipe was imported from
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  ingredients  RecipeIngredient[]
  mealPlanItems MealPlanItem[]
}

model Ingredient {
  id                    String   @id @default(uuid())
  name                  String   @unique
  category              String?  // e.g., "produce", "dairy", "pantry"
  commonUnits           String[] // e.g., ["cup", "tbsp", "tsp", "g", "oz"]
  caloriesPerGram       Float?
  proteinPerGram        Float?
  carbsPerGram          Float?
  fatPerGram            Float?
  fiberPerGram          Float?
  sugarPerGram          Float?
  sodiumPerGram         Float?
  conversionFactors     Json?    // conversion factors to grams for different units
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  recipeIngredients     RecipeIngredient[]
  substitutions         Substitution[] @relation("OriginalIngredient")
  usedAsSubstitute      Substitution[] @relation("SubstituteIngredient")
  groceryListItems      GroceryListItem[]
}

model RecipeIngredient {
  id             String     @id @default(uuid())
  recipe         Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId       String
  ingredient     Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId   String
  unit           String
  quantity       Float
  notes          String?    // optional notes for this ingredient
  isOptional     Boolean    @default(false)
  order          Int        // for ordering ingredients in the recipe
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@unique([recipeId, ingredientId, unit])
}

model Substitution {
  id             String     @id @default(uuid())
  originalIngredient Ingredient @relation("OriginalIngredient", fields: [originalIngredientId], references: [id])
  originalIngredientId String
  substituteIngredient Ingredient @relation("SubstituteIngredient", fields: [substituteIngredientId], references: [id])
  substituteIngredientId String
  ratio          Float      // how much substitute to use for 1 unit of original
  notes          String?    // notes about the substitution
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@unique([originalIngredientId, substituteIngredientId])
}

model MealPlan {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       MealPlanItem[]
}

model MealPlanItem {
  id          String   @id @default(uuid())
  mealPlan    MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealPlanId  String
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  recipeId    String
  date        DateTime
  mealType    String   // breakfast, lunch, dinner, snack
  servings    Int      @default(1)
  notes       String?
  order       Int      // for ordering items within a day
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([mealPlanId, recipeId, date, mealType])
}

model GroceryList {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       GroceryListItem[]
}

model GroceryListItem {
  id            String      @id @default(uuid())
  groceryList   GroceryList @relation(fields: [groceryListId], references: [id], onDelete: Cascade)
  groceryListId String
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])
  ingredientId  String
  unit          String
  quantity      Float
  isChecked     Boolean     @default(false)
  notes         String?
  order         Int         // for ordering items in the list
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([groceryListId, ingredientId, unit])
}
